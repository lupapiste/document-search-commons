

button.btn-dialog, .btn-dialog {
  position: absolute;
  display: table;
  text-align: center;
  bottom: 0;
  right: 6px;
  width: auto;
  //padding: 4px $marginL;
  min-width: $cols2;
  max-width: $cols3;;
  margin-left: $marginS;
  min-height: 40px;
  max-height: 40px;
  line-height: 40px;

  &.cancel {
    width: auto;
  }
}

.btn-dialog > span {
  min-width: $cols2;
  max-width: $cols3;
}

.btn-dialog.btn-primary, .btn-dialog.positive {
  left: 0;
  text-transform: uppercase;
}

// ajax loader for buttons
// Should no longer be used with buttons. See
// the waiting mechanism below. This class is retained,
// because it still has some legacy uses. For example,
// see company.html.
.button-loader {
  white-space:nowrap;
  display:inline-block;
  width:16px;
  height:16px;
  background-image: url("/lp-static/img/ajax-loader-grey-small.gif");
  position: absolute;
  top: 6px;
  right: 8px;
}

// New buttons

$btn-spacer: 12px;
$btn-height: 40px;
$icon-pad: 10px;

@mixin btn-height( $height: $btn-height ) {
  min-height: $height;
  max-height: $height;
  line-height: $height;
}

.btn-base {
  @include btn-height;
  border: none;
  box-sizing: border-box;
  display: inline-block;
  vertical-align: middle;
  font-size: $font-size;  // _typography.scss
  white-space: nowrap;
  text-align: left;
  text-decoration: none;
  padding: {
    left: $btn-spacer;
    top: 0;
    bottom: 0;
    right: $btn-spacer;
  }
  span, i {
    vertical-align: middle;
    // Inline-block would be more intuitive and proper
    // alternative, but for some reason it results in
    // one or two pixel vertical gap. This might be somehow
    // system-related since the main.css works fine
    // with inline-block on its own.
    display: table-cell;
    margin: 0;
  }
  :first-child {
    padding: {
      right: $icon-pad;
    }
  }
  :last-child {
    padding: {
      right: 0px !important;
    }
  }
}

[type=submit], .btn, button {
  @extend .btn-base;
  cursor: pointer;
}

i.btn {
  margin: 0;
  font-size: $lupicon-size;
}

@mixin small {
  min-height: $lupicon-size + 4;
  max-height: $lupicon-size + 4;
  line-height: $lupicon-size + 4;
}

// Layout like button, but semantically is not.
// This is useful when displaying text with icons,
// for example.
.like-btn {
  @extend .btn-base;
  cursor: default;
  padding: 0;
  @include small;
}

.btn-small {
  @include small;
  // Padding adjusted to make i.btn-small.lupicon-xxx square.
  padding: {
    left: 4px;
    right: 4px;
  }
}

i.btn-small {
  font-size: $lupicon-size - 4px;
}

.caps {
  text-transform: uppercase;
}

// Sometimes the "automatic" padding for icon
// causes extra spacing. One typical case:
// No icon, but waiting icon on the right.
.no-icon-pad {
  :first-child {
    padding-right: 0;
  }
}


// You probably still need to tweak
// the vertical properties case by case, since
// the combination of center alignment and
// (automatically) stacking letters is problematic.
// Especially the letter-spacing breaks the alignment.
// The most robust approach is to insert spaces between
// letters (see the lspaced binding in ko.init.js).
.vertical {
  line-height: normal;
  word-break: break-all;
  max-height: none;
  white-space: normal;
  word-spacing: 2em;
  text-align: center;
  vertical-align: default;
  padding: {
    top: $btn-spacer;
    left: 0;
    right: 0;
    bottom: $btn-spacer;
  }
  :first-child {
    // Undo the icon spacing.
    padding-right: 0;
  }
  span {
    padding: 0;
    display: block;
    text-align: center;
    max-width: 16px;
    margin: {
      left: auto;
      right: auto;
      top: $btn-spacer;
    }
  }
}

@mixin disabled( $color: white, $bg: $gray221 ) {
  // !importants are needed in order to make sure
  // that sibling classes are overriden.
  // For example, <div class="btn primary disabled">
  cursor: default !important;
  color: $color !important;
  background-color: $bg !important;
}

.disabled {
  // Empty class. Just used for "signaling", but provided
  // here in order to avoid confusion ("What .disabled?").
}

@mixin button-div-a-i-span ($name) {
  button.#{$name} { @content; }
  div.btn.#{$name} { @content; }
  a.btn.#{$name} { @content; }
  i.btn.#{$name} { @content; }
  span.btn.#{$name} { @content; }
  label.btn.#{$name} { @content; }
}

@mixin styled-input ($bg, $hover-bg, $active-bg,
                     $text: white, $hover-text: white, $active-text: white,
                     $disabled-text: white, $disabled-bg: $gray221 ) {
  color: $text;
  background-color: $bg;

  &:link, &:visited {
    color: $text;
    background-color: $bg;
  }
  &:hover {
    color: $hover-text;
    background-color: $hover-bg;
    text-decoration: none;
  }
  &:active, &.active {
    color: $active-text;
    background-color: $active-bg;
  }
  &:disabled, &.disabled, &.waiting {
    @include disabled( $disabled-text, $disabled-bg );
  }
}

@include button-div-a-i-span ( primary ) {
  @include styled-input( $bg: $orange-link, $hover-bg: $orange-hover, $active-bg: $orange-active );
}

@include button-div-a-i-span (secondary) {
  @include styled-input( $bg: $gray-link, $hover-bg: $gray-hover, $active-bg: $gray-active );
}

@include button-div-a-i-span (positive) {
  @include styled-input( $bg: $green-link, $hover-bg: $green-hover, $active-bg: $green-active );
}

// btn-primary is now the same as positive.
// This is used only for legacy support until the old definitions have been rooted out.

@include button-div-a-i-span (btn-primary ) {
  @include styled-input( $bg: $green-link, $hover-bg: $green-hover, $active-bg: $green-active );
}

@include button-div-a-i-span ( negative ) {
  @include styled-input( $bg: $red-link, $hover-bg: $red-hover, $active-bg: $red-active );
}

@include button-div-a-i-span ( authority ) {
  @include styled-input( $bg: $turqo-link, $hover-bg: $turqo-hover, $active-bg: $turqo-active );
}

@include button-div-a-i-span ( bulletin ) {
  @include styled-input( $bg: $blue-link, $hover-bg: $blue-hover, $active-bg: $blue-active );
}

@include button-div-a-i-span ( bulletin-inverse ) {
  @include styled-input( $bg: $blue-active, $hover-bg: $blue-hover, $active-bg: $blue-link );
}

@mixin function ($text, $hover-text, $active-text ) {
  @include styled-input($bg: white, $hover-bg: white, $active-bg: white,
  $text: $text, $hover-text: $hover-text, $active-text: $active-text,
  $disabled-text: $gray187, $disabled-bg: $gray246);
  border: {
    style: solid;
    width: 1px;
    color: $gray221;
  }
  &:link, &:visited {
    border-color: $gray221;
  }
  &:hover, &:active {
    border-color: $gray187;
  }
}

@include button-div-a-i-span (function) {
  @include function( $orange-link, $orange-hover, $gray51 );
}

.function.disabled {
  @include disabled( $gray187, $gray246 );
  &:hover, &:active, &:disabled {
    border-color: $gray221 !important;
  }
}

button.function {
  &:disabled {
    border-color: $gray221 !important;
  }
}

@include button-div-a-i-span ("function.authority") {
  @include function( $turqo-link, $turqo-hover, $gray51 );
}


@include button-div-a-i-span ("function.julkipano") {
  @include function( $blue-link, $blue-hover, $gray51 );
}

// Link button is a link that is laid out as button.
// However, no background or borders.

a.link-btn {
  @extend .like-btn;
  @include styled-input( none, none, none,
  $text: $orange-link, $hover-text: $orange-hover,
  $active-text: $orange-active, $disabled-bg: none);
  cursor: pointer;
}

a.link-btn-julkipano {
  @extend .like-btn;
  @include styled-input( none, none, none,
  $text: $blue-link, $hover-text: $blue-hover,
  $active-text: $blue-active, $disabled-bg: none);
  cursor: pointer;
}

// Waiting animation

// Example:
// <button class="primary">
//    <i class="wait spin lupicon.refresh"></i>
//    <span>Not waiting</span>
// </button>

// The waiting is started with waiting class.
// <button class="primary waiting">
//    <i class="wait spin lupicon.refresh"></i>
//    <span>Waiting</span>
// </button>
//
// Note: the icon element needs to have wait class.
//       The class just hides the element when not waiting.
//       Here the waiting shows spin animation (see below).
@mixin rotate-frames( $name ) {
  @-webkit-keyframes #{$name} {
    100% {
      -webkit-transform: rotate(360deg);
    }
  }
  @-moz-keyframes #{$name} {
    100% {
      -moz-transform: rotate(360deg);
    }
  }
  @keyframes #{$name}  {
    100% {
      -webkit-transform: rotate(360deg);
      transform:rotate(360deg);
    }
  }
}

@mixin rotate( $name, $speed: 4s ) {
  -webkit-animation: $name $speed linear infinite;
  -moz-animation: $name $speed linear infinite;
  animation: $name $speed linear infinite;
}

@include rotate-frames( spin );

.spin {
  @include rotate( spin );
  vertical-align: middle;
}

i.wait {
  display: none;
  padding: 0 !important;
}

.waiting {
  i {
    display: none;
  }
  i.wait {
    display: table-cell;
  }
}

.waiting .wait + span {
  padding-left: $icon-pad;
}

span + .waiting.wait {
  padding-right: $icon-pad;
}

// Toggle support
// Very similar to waiting.

i.toggle {
  display: none;
  padding: 0 !important;
}

// Since accordions are actually
// divs that include button we must
// be very specific.

.toggled > i, .toggled > button > i {
  display: none;
}

.toggled i.toggle {
  display: table-cell;
}

.toggled .toggle + span {
  padding-left: $icon-pad;
}



// DataTable tweaks.

.dataTables_paginate {
  .paginate_disabled_previous, .paginate_disabled_next {
    @extend .btn;
    @extend .secondary;
  }
  .paginate_disabled_previous, .paginate_disabled_next {
    @extend .btn;
    @include disabled;
  }
}



@mixin stacked {
  display: table;
  .btn-base, .btn, button {
    width: 100%;
    display: block;
    margin: 0;
  }
  div {
    overflow-y: hidden;
  }
}

.stacked {
  @include stacked;
}

.stacked--inline {
  @include stacked;
  display: inline-table;
  vertical-align: top;
}

// Only inner margins
.inner-margins {
  .btn-base, .btn, button, div, a {
    margin-left: $btn-spacer;
  }
  :first-child {
    margin-left: 0;
  }
}

.inner-margins.stacked {
  .btn-base, .btn, button, div, a {
    margin-left: 0;
    margin-top: $btn-spacer;
  }
  :first-child {
    margin-top: 0;
  }
}

// Generic margins support
.margins-s {
  margin: $marginS $marginS $marginS $marginS;
}

// Margin between form buttons.

.form-buttons button {
  margin-left: $btn-spacer;
}

#partiesDocgen button {
  margin-bottom: $marginS;
}

#login-button span {
  text-align: center;
  width: 200px;
}

button {
  &:focus {
    outline:0;
  }
}

.remove-button {
  position: relative;
  .remove-button__row {
    position: absolute;
    top: 0;
    right: 0;
    white-space: nowrap;
    width: 0px;
    overflow: hidden;
    z-index: 1;
    &.remove-button--show {
      width: auto;
    }
    button {
      display: inline-block;
      width: 105px !important;
      &.primary {
        margin-right: -3px;
      }
    }
  }
}

// Could be done in @include button-div-a-i-span (positive), didn't want to add borders anywhere else
.application_actions button.positive {
  border: 1px solid $gray221;
  &:hover, &:active {
    border-color: $gray187;
  }
}

.left-buttons > button {
  margin-right: $btn-spacer;
}
